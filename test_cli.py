import pytest
from click.testing import CliRunner
import cli
from unittest.mock import patch
import decorators


@pytest.fixture(scope="module")
def runner():
    return CliRunner()


def test_menu_stdout(runner):
    result = runner.invoke(cli.cli, ["menu"])
    expected_out = (
        "- Margherita üßÄ: tomato sauce, mozzarella, tomatoes\n"
        "- Pepperoni üçï: tomato sauce, mozzarella, pepperoni\n"
        "- Hawaiian üçç: tomato sauce, mozzarella, chicken, pineapples\n"
    )
    assert result.exit_code == 0
    assert result.output == expected_out


def test_order_delivary_stdout(runner):
    with patch.object(decorators, "randint", return_value=0):
        result = runner.invoke(cli.cli, ["order", "margherita", "--delivery"])
    expected_out = "üçï‚Äç–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 0—Å!\n" "üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 0—Å!\n"
    assert result.exit_code == 0
    assert result.output == expected_out


def test_order_pickup_stdout(runner):
    with patch.object(decorators, "randint", return_value=0):
        result = runner.invoke(cli.cli, ["order", "margherita"])
    expected_out = "üçï‚Äç–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 0—Å!\n" "üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 0—Å!\n"
    assert result.exit_code == 0
    assert result.output == expected_out


def test_order_wrong_pizza_stdout(runner):
    with patch.object(decorators, "randint", return_value=0):
        result = runner.invoke(cli.cli, ["order", "diablo"])
    expected_out = (
        "–¢–∞–∫–æ–π –ø–∏—Ü—Ü—ã –ø–æ–∫–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º –º–µ–Ω—é. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø—Ü–∏–π: margherita, pepperoni, hawaiian\n"
    )
    assert result.exit_code == 0
    assert result.output == expected_out
